const { MessageEmbed } = require("discord.js");
const { sendErrorMessage } = require("lib/utils");

exports.run = async ({
  tagInfo,
  requestInfo,
  reaction,
  requestAuthor,
  guildData,
  reactedMember,
}) => {
  const { message } = reaction;

  // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—Å–∞—Ç—å –æ–± –±–∞–≥–Ω—É—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
  if (!requestInfo) {
    // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    sendErrorMessage({
      message,
      content: "–±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ",
      member: reactedMember,
      react: false,
      messageType: guildData.give_role.message_type,
    });
    // –£–¥–∞–ª–∏–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return reaction.users.remove(reactedMember);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞ –∞–≤—Ç–æ—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏
  if (
    tagInfo &&
    !reactedMember.hasPermission("MANAGE_ROLES") &&
    !reactedMember.roles.cache.some((role) => tagInfo.manage_roles.includes(role.id))
  ) {
    // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    sendErrorMessage({
      message,
      content: "—É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
      member: reactedMember,
      react: false,
      messageType: guildData.give_role.message_type,
    });
    // –£–¥–∞–ª–∏–º —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return reaction.users.remove(reactedMember);
  }

  const whatChanged = [];
  let rolesToGive = tagInfo.give_roles
    .map((r) => (message.guild.roles.cache.get(r) ? `<@&${r}>` : "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"))
    .join("\n");
  let channel = message.guild.channels.cache.get(requestInfo.requested_channel) || null;

  if (requestAuthor) {
    whatChanged.push("+ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
    // –°—Ä–∞–≤–Ω–∏–º –Ω–∏–∫
    const embedNick = message.embeds[0].fields[1].value.replace(/\*/g, "") || null;
    if (!embedNick) {
      whatChanged.push("- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∏–∫–∞ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
    } else {
      if (
        embedNick !== requestAuthor.displayName.replace(/[`|"|*]/gi, "") ||
        embedNick !== requestInfo.user.nick_info[0].replace(/[`|"|*]/gi, "")
      ) {
        whatChanged.push("- –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Å —Ç–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
      }

      const nickRegex = new RegExp(guildData.give_role.name_regexp, "i");
      // –ï—Å–ª–∏ –Ω–∏–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ñ–æ—Ä–º–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
      if (!nickRegex || !nickRegex.test(requestAuthor.displayName)) {
        whatChanged.push("- –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ–æ—Ä–º—É");
      } else {
        whatChanged.push("+ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ–æ—Ä–º—É");
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –Ω–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let nickInfo = requestAuthor.displayName.match(nickRegex);
        nickInfo[0] = requestAuthor.displayName;

        // –ü–æ–∏—Å–∫ —Ç–µ–≥–∞
        const newTagInfo = guildData.give_role.tags
          ? guildData.give_role.tags.find((tag) => tag.names.includes(nickInfo[1]))
          : null;
        if (newTagInfo) {
          whatChanged.push(`+ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–≥ ${nickInfo[1]}`);
          requestInfo.user.nick_info = nickInfo;

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
          //rolesToGive = newTagInfo.give_roles.map((r) => `<@&${r}>`).join("\n");
          const roles = newTagInfo.give_roles.map(
            (role) => message.guild.roles.cache.get(role) || null
          );
          if (roles.find((role) => role && role.editable)) {
            whatChanged.push(`+ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–æ–ª–µ–π`);
          } else {
            whatChanged.push(`- –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–æ–ª–µ–π`);
          }

          const embedRoles = message.embeds[0].fields[2].value.replace(/\*/g, "") || null;
          if (!embedRoles || rolesToGive !== embedRoles) {
            whatChanged.push(`- –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏`);
            requestInfo.give_roles = newTagInfo.give_roles;
          }

          requestInfo.save();
        } else {
          whatChanged.push(`- –¢–µ–≥ "${nickInfo[1]}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
      }
    }
  } else {
    whatChanged.push("- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
  }
  if (!channel) whatChanged.push(`- –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  else whatChanged.push(`+ –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω`);

  editRequestMessage({
    message,
    member: requestAuthor || `<@!${embedAuthorId}>`, // eslint-disable-line
    rolesToGive,
    channel,
    whatChanged,
  });
  return reaction.users.remove(reactedMember);
};

function editRequestMessage({ message, member, rolesToGive, channel, whatChanged }) {
  message.edit(
    new MessageEmbed()
      .setColor("#b8ff29")
      .setTitle("**üì® | –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏**")
      .addFields(
        { name: `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**`, value: `**${member}**`, inline: true },
        {
          name: `**–ù–∏–∫–Ω–µ–π–º**`,
          value: `**${member.displayName ? member.displayName : "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}**`,
          inline: true,
        },
        { name: `**–†–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏**`, value: `**${rolesToGive}**`, inline: true },
        { name: `**–ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏**`, value: `**${channel || "–£–¥–∞–ª–µ–Ω"}**`, inline: true },
        { name: "**–ü—Ä–∏–º–µ—á–∞–Ω–∏—è**", value: "**```diff\n" + whatChanged.join("\n") + "```**" },
        {
          name: `**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–¥–∞—á–µ**`,
          value:
            "**`[‚úÖ] - –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å\n" +
            "[‚ùå] - –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏\n" +
            "[üîé] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n" +
            "[üóëÔ∏è] - —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`**",
        }
      )
  );
}
